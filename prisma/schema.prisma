generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Genre {
  id     Int          @id @default(autoincrement())
  name   String       @unique
  animes AnimeCache[] @relation("AnimeGenres")
}

model Recommendation {
  id           Int      @id @default(autoincrement())
  animeId      Int
  title        String
  titleEnglish String?
  imageUrl     String
  mood         String
  synopsis     String?
  userId       String?
  note         String?
  isFavorite   Boolean  @default(false)
  trailer      String?
  source       String?
  episodes     String?
  score        String?
  genres       String? // ← ✅ Ajoute cette ligne
  createdAt    DateTime @default(now())
}

model AnimeCache {
  id           Int        @id @default(autoincrement())
  animeId      Int        @unique
  title        String
  titleEnglish String?
  imageUrl     String
  synopsis     String?
  genres       Genre[]    @relation("AnimeGenres")
  trailer      String?
  source       String?
  episodes     String?
  score        String?
  moodCache    MoodCache?
  createdAt    DateTime   @default(now())
}

model AnimeSeen {
  id        Int      @id @default(autoincrement())
  animeId   Int
  userId    String
  createdAt DateTime @default(now())

  @@unique([animeId, userId]) // un anime ne peut être vu qu’une fois par user
}

model MoodCache {
  id           Int        @id @default(autoincrement())
  animeId      Int        @unique
  anime        AnimeCache @relation(fields: [animeId], references: [animeId])
  title        String
  titleEnglish String?
  imageUrl     String
  synopsis     String
  trailer      String?
  source       String?
  episodes     String?
  score        String?
  mood         String
  genres       String? // ← ✅ Ajoute cette ligne
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
